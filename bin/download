#!/usr/bin/python3

from argparse import ArgumentParser
import subprocess
import hashlib
import time
import json
import os

def shell(cmd):
    """
    simplifys calling shell
    """
    return subprocess.check_output(cmd, shell=True).decode().strip()

def parse_args():
    parser=ArgumentParser('command to quickly scp files onto servers\nservers must be defined in ~/.ssh/config')
    parser.add_argument('server', nargs=1, help='name of server that is defined in ssh config file')
    parser.add_argument('files', nargs='*', help='files to be downloaded')
    return parser.parse_args()

def download(f):
    """
    does scp shell
    """
    if not f.startswith('~') and not f.startswith('/'):
        cmd='nice scp -r {server}:~/uploads/{f} ./'
    else:
        cmd='nice scp -r {server}:{f} ./'
    cmd = cmd.format(
        server=args.server[0] if isinstance(args.server, list) else args.server,
        f=f
    )
    os.system(cmd)

def select_file():
    ls=shell('ssh {server} "ls -l uploads"'.format(
        server=args.server[0]
    )).split('\n')
    for i in range(len(ls)):
        print(i, ls[i])
    return ls[int(input('select -> ').strip())]

def create_archive(f):
    cmd = "tar zcvf {f}.tgz {f}".format(f=f)
    os.system(cmd)
    return '{f}.tgz'.format(f=f)

def delete_archive():
    print(f'rm {PATH}')
    os.remove(PATH)

def main():
    if len(args.files) == 0:
        download(select_file())
        exit(0)
    for f in args.files:
        download(f)

if __name__ == "__main__":
    args=parse_args()
    main()
