#!/usr/bin/python3

from sys import argv
import subprocess
import hashlib
import time
import json
import os

"""
# Usage

upload jcs filename
upload jcsl filename --safe --pack
"""

def shell(cmd):
    """
    simplifys calling shell
    """
    return subprocess.check_output(cmd, shell=True).decode().strip()

ip_map = json.loads(shell('ip_map'))

host, key = ip_map[argv[1]]
#global PATH
PATH=''

def parse_options():
    options = ['SAFE', 'PACK', 'HASH']
    option_args = list(filter(lambda arg: '--' in arg, argv))
    for op in options:
        op_val = False if f"--{op.lower()}" not in option_args else True
        exec(f"global {op}; {op}={op_val}")

def filename_check():
    return HASH or PATH.split('/')[-1] in shell(f"ssh -i {key} {host} \"ls -a ~/uploads/\"").split('\n')

def make_safe_filename():
    fname, ext = split_filename()
    hashed_fname = fname + '_' + hashlib.sha256(f"{fname}{float(time.time())}".encode()).hexdigest()
    if ext is not None:
        hashed_fname += ext
    print(f"uploaded to ~/uploads/{hashed_fname}")
    return hashed_fname

def split_filename():
    fname = PATH.split('/')[-1]
    extension = None
    if '.' in fname:
        fsplit = fname.split('.')
        fname, extension = fsplit[0], '.' + '.'.join(fsplit[1:])
    return fname, extension 

def isdir(filename):
    abspath = shell('pwd') + '/' + filename
    return os.path.isdir(abspath)

def upload():
    """
    does scp shell
    """
    cmd = 'nice scp -r -i ' + key + ' ' + PATH + ' ' + host + ':~/uploads/'
    if not SAFE and filename_check():
        cmd += make_safe_filename()
    else:
        flag=None
    os.system(cmd)
    if 'flag' in locals():
        print(f"uploaded to ~/uploads/{PATH.split('/')[-1]}")
    #os.system(cmd)

def select_file():
    ls=os.listdir('./')
    for i in range(len(ls)):
        print(i, ls[i])
    return ls[int(input('select -> ').strip())]

def create_archive():
    global PATH
    cmd = f"tar zcvf {PATH}.tgz {PATH}"
    print(cmd)
    return_code = os.system(cmd)
    PATH = f"{PATH}.tgz"
    return return_code

def delete_archive():
    print(f'rm {PATH}')
    os.remove(PATH)


if __name__ == "__main__":
    parse_options()
    files = list(filter(lambda arg: '--' not in arg, argv[2:]))
    if len(files) == 0:
        files.append(select_file())
    for f in files:
        print('-' * 20)
        PATH = f
        if PACK and create_archive() != 0:
            print(f'error in packing {PATH} into tar ball')
            exit(1)
        upload()
        if PACK:
            delete_archive()
