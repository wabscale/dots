#!/usr/bin/zsh


o() {
    if [ "$#" = "0" ]
    then
        open .
    else
        for file in $@
        do
            open $file
        done
    fi
}

gitc() { # git commit
    MSG="$@"
    git commit -m "$MSG"
}

gitdb() { # git delete branch
    for i in $@
    do
        git push origin --delete $i
        git branch -D $i
        echo "deleted $i"
    done
}

gitcb() { # git create branch
    if [ "$#" != "2" ]
    then
        return 1
    fi
    git checkout -b $1 $2
    git push --set-upstream origin $1
    echo "created $1 from $2"
}

gitqs() { # git quick save
    git pull

    if [ "$#" = "0" ]
    then
        COMMIT_MESSAGE="CHG"
    else
        COMMIT_MESSAGE="$@"
    fi

    # echo $COMMIT_MESSAGE
    git status
    python3 -c "print(''.join(['=' for _ in range(40)]), '', sep='\n')"
    git add .
    git commit -m "$COMMIT_MESSAGE"
    git push
}

monport() {
    sudo tcpdump -vv port $1 and '(tcp-syn|tcp-ack)!=0'
}

lsport() {
    lsof -i tcp:$1
}

cd() {
    builtin cd $1
    pwd > ~/.lastdir

}

c() {
    if [ "$#" = "0" ]; then
        cd ..;
        l;
    else
        cd $1;
        l;
    fi
    pwd > ~/.lastdir
}


py() {
    A="$(@)"
    /usr/bin/python2 -c "print $A";
}

pack() {
    if tar zcvf $1.tgz $@; then
        echo packed into $1.tgz
    fi
}

e() {
    if ! emacsclient -e "(daemonp)" &> /dev/null; then
        echo "starting daemon...";
        emacs -nw --daemon &> /dev/null;
    fi
    emacsclient -nw -c "$1"
}

# epy() {
#     nice emacs -nw --load ~/.emacs.d/pyinit.el $1
#     [ -e $1~ ] && rm $1~ &> /dev/null
#     return 0;
# }

du() {
    if [ 0 = $# ]; then
        nice du -h -d 0 $(pwd)
    else
        for i in $@; do
            nice du -h -d 0 $i
        done
    fi
}

dul() {
    if [ $# = 0 ]; then
        DU_PATH=$(pwd)
    else
        DU_PATH=$(pwd)/$1
    fi

    for i in $(ls -A $DU_PATH); do
        nice du -h -d 0 $DU_PATH/$i;
    done | sort -h -r -

}


gdb() {
    nice gdb $@
    [ -n "$(ls -a | grep peda-session)" ] && rm peda-session*
    [ -e .gdb_history ] && rm .gdb_history
}

dkill() {
    docker kill `docker ps -q`
    docker system prune -f
}

dcleanv() {
    docker volume ls -qf dangling=true | xargs -r docker volume rm
    docker system prune -f
}

dclean() {
    # https://lebkowski.name/docker-volumes/
    dkill
    dcleanv
    docker rmi `docker image list -q`
    for i in $(docker image list -q); do docker rmi -f $i; done
}

trizen() {
    # local packages mode
    # mode=$1
    # packages="$(echo $@ | tr ' ' '\n' | awk '{ c+=1; if (c>1) {print $0} }')"
    if [ "${USER}" = "root" ]; then
        su jc -c "nice trizen ${@}"
    else
        nice trizen ${@}
    fi
}

srcv() {
    local env_names
    declare -a env_names=(
        "venv"
        "env"
    )
    for env_name in $env_names; do
        if [ -d $env_name ]; then
            source ./$env_name/bin/activate
            break
        fi
    done
}


# pipr() { # dangerous
#     for dep in $(pip show $1 | nice grep Requires | sed 's/Requires: //g; s/,//g'); do
#         echo $dep
#         pip uninstall $dep
#     done
# }

# pip3r() {
#     for dep in $(pip show $1 | nice grep Requires | sed 's/Requires: //g; s/,//g'); do
#         echo $dep
#         pip uninstall $dep
#     done
# }



start() {
    for i in "$@"; do
        case "$i" in
            "d")
                echo "starting docker..."
                systemctl start docker
                ;;
            "e")
                echo "starting spacemacs..."
                emacs --daemon -nw --insecure &> /dev/null
                ;;
            "n")
                interface=`ip addr | nice grep -Po 'wl([A-Za-z]|[0-9])*'`
                echo "starting netctl-auto@${interface}.service..."
                systemctl start netctl-auto@${interface}.service
                ;;
            "db")
                /opt/dockerfiles/mariadb/start
                ;;
            *)
                declare -A services=(
                    ["e"]="emacs"
                    ["d"]="docker"
                    ["n"]="netctl"
                )
                echo "Plz specify argument ${services}"
                ;;
        esac
    done
}


stop() {
    for i in "$@"; do
        case "$i" in
            "d")
                echo "stopping docker..."
                systemctl stop docker
                ;;
            "e")
                echo "stopping spacemacs..."
                killall emacs
                ;;
            "n")
                interface=`ip addr | awk '{ print $2 }' | nice grep -Po 'wl([A-Za-z]|[0-9])*'`
                echo "stopping netctl-auto@${interface}.service..."
                systemctl stop netctl-auto@${interface}.service
                ;;
            "db")
                /opt/dockerfiles/mariadb/stop
                ;;
            *)
                declare -A services=(
                    ["e"]="emacs"
                    ["d"]="docker"
                    ["n"]="netctl"
                )
                echo "Plz specify argument ${services}"
                ;;
        esac
    done
}


restart() {
    for i in "$@"; do
        service="${i}"
        declare -A services=(
            ["e"]="emacs"
            ["d"]="docker"
            ["n"]="netctl"
            ["db"]="mariadb"
        )

        if [ -z "${services[${service}]}" ]; then
            echo "select service plz ${services}"
            return 1
        fi

        echo "restarting ${services[$service]}..."

        {
            stop "${service}"
            start "${service}"
        } &> /dev/null
    done
}


build() {
    MAN="build [service(s) | ./directory/path | .]

This tool will attempt to build the service(s) specified, or the images specified
in the current directory. If no arguments are specified then the tool will attempt
to build a docker-compose file, or dockerfile in the current directory. If a path is
specified, then the script will attempt to build the compose file, or dockerfile in
that directory.

depends on jq and ruby

eg:
build
build ./directory
build webstorm goland"

    if [ "-h" = "$1" ] || [ "--help" = "${1}" ]; then
        echo "${MAN}"
        return 0
    fi

    attempt_to_build() {
        # Attempts to build the compose file,
        # or the dockerfile in the specied directory
        if [ -f ./${1}/docker-compose.yml ] || [ -f ./${1}/docker-compose.yaml ]; then
            dc_file="$(ls docker-compose.y*ml | head -n 1)"
            echo "running docker-compose -f ${1}/${dc_file} build --parallel" 1>&2
            docker-compose -f ${1}/${dc_file} build --parallel
            return 0
        elif [ -f ${1}/Dockerfile ]; then
            tag="$(basename $(pwd))"
            echo "running docker build -f ${1}/Dockerfile -t ${tag} ." 1>&2
            docker build -f ${1}/Dockerfile -t ${tag} .
            return 0
        else
            return 1
        fi
    }

    yaml2json() {
        ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))' $@
    }

    if (( $# == 0 )); then
        attempt_to_build .
        ret_code="$?"
        if (( ${ret_code} != 0 )); then
            echo "unable to build ." 1>&2
        fi
        return ${ret_code}
    fi

    if [ -z "${DOCKERFILES_PATH}" ]; then
        echo "DOCKERFILES_PATH not set"
        return 1
    fi

    declare -A service_map

    for dc_file in $(find "${DOCKERFILES_PATH}" -name 'docker-compose.yml' 2> /dev/null); do
        for service in $(yaml2json "${dc_file}" | jq '.services | keys[]' -r); do
            service_map[${service}]="${dc_file}"
        done
    done

    for arg in $@; do
        if [ -d "${arg}" ]; then
            attempt_to_build "${arg}"
        elif [ -n "${service_map[${arg}]}" ]; then
            echo "running docker-compose -f ${service_map[${arg}]} build ${arg}" 1>&2
            docker-compose -f "${service_map[${arg}]}" build "${arg}"
        fi
    done
}

if alias md &> /dev/null; then
    unalias md
fi
md() {
    if (( $# == 0 )); then
        pandoc README.md | lynx -stdin
        return
    fi
    pandoc $1 | lynx -stdin
}


giti() {
    echo >> .gitignore
    for i in $@; do echo $i >> .gitignore; done
}

dockeri() {
    echo >> .dockerignore
    for i in $@; do echo $i >> .dockerignore; done
}

ddg() { firefox "https://duckduckgo.com/?q=$(echo $@ | xargs)" }

kdash() {
    echo https://127.0.0.1:8443
    kubectl -n kubernetes-dashboard describe secret admin-user-token | nice grep -Po 'ey.*' | xclip
    echo 'Copied token into clipboard...'
    kubectl port-forward service/kubernetes-dashboard 8443:443 -n kubernetes-dashboard
}

# cobc() {
#     docker build -t cobc - <<EOF
# FROM debian:stretch
# RUN apt update && apt install -y open-cobol
# VOLUME /build
# WORKDIR /build
# ENTRYPOINT cobc
# EOF
#     docker run \
#            -it \
#            --rm \
#            -w /build \
#            -v $(pwd):/build \
#            --entrypoint cobc \
#            -u $(id -u):$(id -g) \
#            cobc $@
# }


fsync() {
    ssh $1 "find $2 -type f" > /tmp/fsync
    cat /tmp/fsync | sed 's/ /\\ /' | \
        parallel --quote -j12 rsync --times --progress \
                 --human-readable --relative ${1}:{} "${3:-.}"
}
